import numpy as np

#This class constructs the dimensional "skeleton". 


class skeleton:
  def __init__(self, heightAvg, heightStdDev, upperLegLengthAvg, lowerLegLengthAvg, footHeightAvg, headHeightAvg, torsoHeightAvg, neckHeightAvg, hipHeightAvg, wingspanAvg, wingspanStdDev, shoulderWidthAvg, handLengthAvg, forearmLengthAvg, upperArmLengthAvg, hipWidthAvg, ankleCircAvg, wristCircAvg, chestWidthAvg, chestGirthAvg, neckGirthAvg, waistGirthAvg, buttockGirthAvg):
    
    #Generates a random height based on normal distrubution
    
    abstractHeight = np.random.normal(heightAvg, heightStdDev, 1)

    # Abstract height is first  divided by a limbs average proportion in relation to human height. newLimb is then generated by taking this figure and the proportional standard deviation to output a random length based on normal distrubution for the abstractHeight that was generated
    def limbGen(limbAvg):
       aHeight = abstractHeight
       limbStd = heightStdDev 
       newLimb = np.random.normal(aHeight * limbAvg, limbAvg * limbStd)
       return newLimb
    
    #Using the above class to generate all vertical limb measurements
    upperLegLength = limbGen(upperLegLengthAvg)  
    self.upperLegLength = upperLegLength
    lowerLegLength = limbGen(lowerLegLengthAvg)
    self.lowerLegLength = lowerLegLength
    footHeight = limbGen(footHeightAvg)
    self.footHeight = footHeight
    headHeight = limbGen(headHeightAvg)
    self.headHeight = headHeight
    torsoHeight = limbGen(torsoHeightAvg)
    self.torsoHeight = torsoHeight
    neckHeight = limbGen(neckHeightAvg)
    self.neckHeight = neckHeight
    hipHeight = limbGen(hipHeightAvg)
    self.hipHeight = hipHeight
    
    #final height is all of the limbs added together
    height = upperLegLength + lowerLegLength + footHeight + headHeight + torsoHeight + neckHeight + hipHeight
    self.outputHeight = height

    #Generation of wingspan is generated identically to vertical height, only the abstract wingspan is generated by the average ratio of height to wingspan based on abstractHeight
    abstractWingspan =  height * wingspanAvg
    
    def wingGen(wingAvg):
      aWing = abstractWingspan
      wingStd = wingspanStdDev
      newWing = np.random.normal(aWing * wingAvg, wingAvg * wingStd)
      return newWing
        
    shoulderWidth = wingGen(shoulderWidthAvg)
    self.shoulderWidth = shoulderWidth
    handLength = wingGen(handLengthAvg)/ 2  #Divide limbs that are mutlitple by 2
    self.handLength = handLength
    forearmLength = wingGen(forearmLengthAvg)/ 2
    self.forearmLength = forearmLength
    upperArmLength = wingGen(upperArmLengthAvg)/ 2
    self.upperArmLength = upperArmLength

    self.wingspan = shoulderWidth + (handLength * 2) + (forearmLength * 2)  + (upperArmLength * 2)

    def otherGen(otherAvg):
      newOther = np.random.normal(height * otherAvg, otherAvg * heightStdDev)
      return newOther
    
    hipWidth = otherGen(hipWidthAvg)
    self.hipWidth = hipWidth
    ankleCirc = otherGen(ankleCircAvg)
    self.ankleCirc = ankleCirc
    wristCirc = otherGen(wristCircAvg)
    self.wristCirc = wristCirc
    chestWidth = otherGen(chestWidthAvg)
    self.chestWidth = chestWidth
    chestGirth = otherGen(chestGirthAvg)
    self.chestGirth = chestGirth
    neckGirth = otherGen(neckGirthAvg)
    self.neckGirth = neckGirth
    waistGirth = otherGen(waistGirthAvg)
    self.waistGirth = waistGirth
    buttockGirth = otherGen(buttockGirthAvg)
    self.buttockGirth = buttockGirth





    






